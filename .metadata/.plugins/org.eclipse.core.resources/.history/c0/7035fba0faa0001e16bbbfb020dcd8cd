package crawl;

import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.gson.Gson;

public class OpenSea {
	// Kiểm tra xem item đã tồn tại trong mảng lưu trữ chưa
//	public static boolean isItemExist(ArrayList<NFTs> list, int rank) {
//		for (NFTs l : list) {
//			if (l.getRank() == rank) return true;
//		}
//		return false;
//    }
//	
	public static void main(String[] args) throws InterruptedException {
		
		ArrayList<NFTs> listCollection = new ArrayList<NFTs>();
		
		// Lấy ngày và giờ hiện tại
        LocalDateTime currentDateTime = LocalDateTime.now();

        // Định dạng ngày và giờ theo ý muốn (ví dụ: yyyy-MM-dd HH:mm:ss)
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String DateTime = currentDateTime.format(formatter);
		
		System.setProperty("webdriver.edge.driver", "E:\\NFTs\\NFTs\\lib\\msedgedriver.exe");
		
		WebDriver driver = new EdgeDriver();
		
		driver.get("https://opensea.io/");
        driver.manage().window().maximize();
        driver.manage().deleteAllCookies();
        driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        
        driver.findElement(By.xpath("//button[contains(text(),'View all')]")).click();
		Thread.sleep(5000);
		
		WebDriverWait wait = new WebDriverWait(driver, 50);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[data-id='Item']")));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,500)");
		Thread.sleep(3000);
		List<Document> elements = new ArrayList<Document>();
		 
		while (elements.size() < 95) {
			// Đợi cho đến khi thêm bài viết mới xuất hiện (hoặc có thể sử dụng điều kiện khác)
            wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[data-id='Item']")));
            Thread.sleep(3000);
            List<WebElement> nftElements = driver.findElements(By.cssSelector("a[data-id='Item']"));
            for (WebElement n : nftElements) {
            	String elementHtml = n.getAttribute("outerHTML");
            	Document document = Jsoup.parse(elementHtml);
            	elements.add(document);
            }
            js.executeScript("window.scrollBy(0,2200)");
		}
		List<Document> listWithoutDuplicates = elements.stream()
                .distinct()
                .collect(Collectors.toList());
		for(Document e : listWithoutDuplicates) {
			Elements rankElement = e.select("div:nth-child(2) > div:nth-child(1) > span:nth-child(1) > div:nth-child(1)");
			//int rank = Integer.parseInt(rankElement.text().substring(0, rankElement.text().indexOf(' ')));
			System.out.println(rankElement.text());
		}
		
		for(Document e : listWithoutDuplicates) {
            	NFTs item = new NFTs();
            	// Get rank
                Elements rankElement = e.select("div:nth-child(1) > div:nth-child(1)");
            	int rank = Integer.parseInt(rankElement.text().substring(0, rankElement.text().indexOf(' ')));
                item.setRank(rank);
                System.out.println("Rank: " + item.getRank());
            
                
                // Get name collection
                Elements nameElement = e.select("div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > span:nth-child(1)");
                item.setCollection(nameElement.text());
                System.out.println("Collection: " + item.getCollection());

                
                // Get volume
                Elements volumeElement = e.select("div:nth-child(2) > div:nth-child(1) > span:nth-child(1) > div:nth-child(1)");
                item.setVolume(volumeElement.text());
                System.out.println("Volume: " + item.getVolume());
                
                // Get percentChange
                Elements percentElement = e.select("div:nth-child(3) > span:nth-child(1)");
                item.setPercentChange(percentElement.text());
                System.out.println("%Change: " + item.getPercentChange());

                
                // Get Floor Price
                Elements priceElement = e.select("div:nth-child(4) > div:nth-child(1) > span:nth-child(1)");
                item.setFloorPrice(priceElement.text());
                System.out.println("Floor Price: " + item.getFloorPrice());

                
                // Get Sales
                Elements salesElement = e.select("div:nth-child(5) > span:nth-child(1)");
                String saleString = salesElement.text();
                if (saleString.contains(",")) {
                	saleString = saleString.replace(",", "");
                	item.setSales(Integer.parseInt(saleString));
                }
                else if (saleString.contains("K")) {
                	saleString = saleString.replace("K", "");
                	item.setSales(Integer.parseInt(saleString) * 1000);
                }
                else item.setSales(Integer.parseInt(saleString));
                System.out.println("Sales: " + item.getSales());
                System.out.println("\n");
                
                // Set Date
                item.setDate(DateTime);


                listCollection.add(item);
                
            }      
           
		
		//Chuyển listCollection thành JSON text       
        Gson gson = new Gson();
        String jsonData = gson.toJson(listCollection);
        
      //Write JSON file
        try (FileWriter file = new FileWriter("collection(11).json")) {
        	
        	file.write(jsonData);
        	file.flush();
			
		} catch (IOException e) {
			// TODO: handle exception
			e.printStackTrace();
		}

        System.out.println(jsonData);
        for (int i = 0; i < listCollection.size(); i++){
            System.out.println("#" + listCollection.get(i).getRank() + " " + listCollection.get(i).getCollection());
        }
		driver.quit();
	}
}
