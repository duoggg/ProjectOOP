package crawl;


import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.gson.Gson;

import application.model.AMarketModel;
import application.model.BinanceModel;

public class BinanceCrawler extends AMarketCrawl<AMarketModel> {
	
	private static final String     URL = "https://www.binance.com/en/nft/ranking?tab=trend" ;
	private static final String     JSON_PATH = "binance(12).json" ;
	private ArrayList<BinanceModel> listCollection = new ArrayList<BinanceModel>();
	protected List<WebElement>      elements ;
	
	public BinanceCrawler(AMyDriverContext myDriver) {
		this.driver = myDriver.getDriver() ;
		driver.get(URL);
        driver.manage().window().maximize();
        driver.manage().deleteAllCookies();
        driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        driver.findElement(By.xpath("//button[contains(text(),'Accept')]")).click();
        try {
			Thread.sleep(3000);
			WebDriverWait wait = new WebDriverWait(driver, 50);
		    wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[href*='/collection/']")));
	        Thread.sleep(3000);
	        this.elements = driver.findElements(By.cssSelector("a[href*='/collection/']"));
	        
		} catch (InterruptedException e) {
			e.printStackTrace();
		}     
	}

	@Override
	public void crawl() {
		for (int i = 0 ; i < elements.size() ; i++) { 	
	       BinanceModel item = getCollectionElement(i);
	       listCollection.add(item); 
	    }
		saveAsJsonFile();
		driver.quit();
	}
	
	@Override
	public void saveAsJsonFile() {
		 Gson gson = new Gson();
	     String jsonData = gson.toJson(listCollection);
	     try (FileWriter file = new FileWriter(JSON_PATH)) {
	        	file.write(jsonData);
	        	file.flush();	
		  } catch (IOException e) {
			e.printStackTrace();
		 }
	     System.out.println(jsonData);
	}

	@Override
	public BinanceModel getCollectionElement(int n) {
		int    rank              = getRankElement(n) ;
		String collection        = getNameElelement(n);
		String volume            = getVolumeElelement(n);
		String percentChange     = getPercentChangeElelement(n);
		String floorPrice		 = getFloorPriceElelement(n);
		String date              = getDateElelement(n);
		int    owners			 = getOwnersElement(n);
		int    items 			 = getItemsElement(n) ;
		
		BinanceModel item = new BinanceModel(rank, collection, volume, percentChange, floorPrice, date, owners, items); 
		return item;
	}

	@Override
	public int getRank(WebElement n) {
		int rank ;
    	WebElement rankElement = n.findElement(By.cssSelector("div:nth-child(1) > div:nth-child(1)"));
    	if (rankElement.getText().equals("")) {
        		WebElement rankSpecial = n.findElement(By.cssSelector("div:nth-child(1) > div:nth-child(1) > span:nth-child(1) > img:nth-child(1)"));
        		String     rankSrc     = rankSpecial.getAttribute("src");
        		if      (rankSrc.contains("first_iii"))  rank = 1;
        		else if (rankSrc.contains("second_iii")) rank = 2;
        		else 									 rank = 3;
    	}
    	else    rank =  Integer.parseInt(rankElement.getText());
        System.out.println("Rank: " + rank);
		return rank ;
	}

	@Override
	public String getName(WebElement n) {
		String collection ;
		WebElement collectionElement = n.findElement(By.cssSelector("div:nth-child(1) div:nth-child(3) div:nth-child(1) div:nth-child(1)"));
        collection = collectionElement.getText();
        System.out.println("Collection: " + collection);
		return collection;
	}

	@Override
	public String getVolume(WebElement n) {
		 String volume ;
	     WebElement volumeElement = n.findElement(By.cssSelector("div:nth-child(2) > div:nth-child(1) > div:nth-child(1)"));
	     volume = volumeElement.getText();
	     System.out.println("Volume: " + volume);
		return volume;
	}

	@Override
	public String getPercentChange(WebElement n) {
		 String percentChange ;
	     WebElement percentElement = n.findElement(By.cssSelector("div:nth-child(3) > div:nth-child(1) > div:nth-child(1)"));
	     percentChange = percentElement.getText();
	     System.out.println("%Change: " + percentChange);
		 return percentChange;
	}

	@Override
	public String getFloorPrice(WebElement n) {
		 String floorPrice ;
	     WebElement priceElement =  n.findElement(By.cssSelector("div:nth-child(4) > div:nth-child(1) > div:nth-child(1)"));
	     floorPrice = priceElement.getText();
	     System.out.println("Floor Price: " + floorPrice );
		 return floorPrice;
	}

	@Override
	public String getDate(WebElement n) {
		LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter   = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String dateTime               = currentDateTime.format(formatter);
		return dateTime;
	}
	
	public int getOwners(WebElement n) {
		int owners ;
        WebElement ownersElement = n.findElement(By.cssSelector("div:nth-child(6)"));
        String ownerString = ownersElement.getText();
        if     (ownerString.contains(","))    owners = Integer.parseInt(ownerString.replace(",", ""));
        else if(!ownerString.equals("--"))    owners = Integer.parseInt(ownerString); 
        else  								  owners = 0;
        System.out.println("Owners: " + owners);
        return owners ;
	}
	
	public int getItemsElement(WebElement n) {
		int items ;
	    WebElement itemsElement = elements.get(n).findElement(By.cssSelector("div:nth-child(7)"));
	    String itemString = itemsElement.getText() ;
	    if     (itemsElement.getText().contains(","))  items = Integer.parseInt(itemString.replace(",", ""));
	    else if  (!itemString.equals("--"))            items = Integer.parseInt(itemString); 
	    else  										   items = 0;
	    System.out.println("Items: " + items);
	    return items ;
	}
	
	public static void main(String[] args) throws InterruptedException {
		BinanceCrawler aBinanceCrawler = new BinanceCrawler(new EdgeDriverContext());
       aBinanceCrawler.crawl();
		
	}
}