package crawl;

import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import com.google.gson.Gson;
import application.model.OpenSeaModel;

public class OpenSea extends AMarketCrawl<OpenSeaModel> {
	
	private static final String     URL = "https://opensea.io/rankings/trending?sortBy=one_day_volume" ;
	private static final String     JSON_PATH = "collection.json" ;
	private List<OpenSeaModel> listCollection = new ArrayList<OpenSeaModel>();
	private WebDriverWait wait  ;

	public OpenSea(AMyDriverContext myDriver) {
		this.driver = myDriver.getDriver() ;
		driver.get(URL);
        driver.manage().window().maximize();
        driver.manage().deleteAllCookies();
        driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        driver.findElement(By.xpath("//button[contains(text(),'Accept')]")).click();
        try {
        	WebDriverWait wait = new WebDriverWait(driver, 50);
    		wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[data-id='Item']")));
    		Thread.sleep(3000);   
		 } catch (InterruptedException e) {
			e.printStackTrace();
		}     
	}
	
	@Override
	public void crawl() {
		
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,500)");
		List<OpenSeaModel> list = new ArrayList<OpenSeaModel>() ;
		while (list.size() < 95) {
            wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[data-id='Item']")));
            try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
            List<WebElement> nftElements = driver.findElements(By.cssSelector("a[data-id='Item']"));
            for (WebElement n : nftElements) {
            	try {
            	     OpenSeaModel item = getCollection(n); 
                     list.add(item);  
				 } catch (NumberFormatException e) {
					System.out.println("Error!");
			     }	
              }      
             js.executeScript("window.scrollBy(0,2200)");
		}
		driver.quit();
		listCollection = list.stream().distinct().collect(Collectors.toList());	
		saveAsJsonFile();
	}

	@Override
	public void saveAsJsonFile() {
		 Gson gson = new Gson();
	     String jsonData = gson.toJson(listCollection);
	     try (FileWriter file = new FileWriter("collection.json")) {
	        file.write(jsonData);
	        file.flush();
	     } catch (IOException e) {
				e.printStackTrace();
		}
	}

	@Override
	public OpenSeaModel getCollection(WebElement n) {
		int    rank              = getRank(n) ;
		String collection        = getName(n);
		String volume            = getVolume(n);
		String percentChange     = getPercentChange(n);
		String floorPrice		 = getFloorPrice(n);
		String date              = getDate();
		int    sales			 = getSale(n);	
		OpenSeaModel item = new OpenSeaModel(rank, collection, volume, percentChange, floorPrice, date,sales );
		return item;
	}

	@Override
	public int getRank(WebElement n) throws NumberFormatException {
		WebElement rankElement = n.findElement(By.cssSelector("div:nth-child(1) > div:nth-child(1)"));
        int rank = Integer.parseInt(rankElement.getText());
        System.out.println("Rank: " + rank);
		return 0;
	}

	@Override
	public String getName(WebElement n) {
        WebElement collectionElement = n.findElement(By.cssSelector("div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > span:nth-child(1)"));
        String  name =  collectionElement.getText();
        System.out.println("Collection: " + name);
        return name ;
	}

	@Override
	public String getVolume(WebElement n) {
		  WebElement volumeElement = n.findElement(By.cssSelector("div:nth-child(2) > div:nth-child(1) > span:nth-child(1) > div:nth-child(1)"));
		  String     volume        =  volumeElement.getText();
          System.out.println("Volume: " + volume);
          return volume ;
	}

	@Override
	public String getPercentChange(WebElement n) {
		 WebElement percentElement = n.findElement(By.cssSelector("div:nth-child(3) > span:nth-child(1)"));
         String percentChange = percentElement.getText();
         System.out.println("%Change: " + percentChange);
         return percentChange ;
	}

	@Override
	public String getFloorPrice(WebElement n) {
		 WebElement priceElement = n.findElement(By.cssSelector("div:nth-child(4) > div:nth-child(1) > span:nth-child(1)"));
         String floorPrice = priceElement.getText();
         System.out.println("Floor Price: " + floorPrice);
         return floorPrice ;
	}
	
	public int getSale(WebElement n) throws NumberFormatException {
		WebElement salesElement = n.findElement(By.cssSelector("div:nth-child(5) > span:nth-child(1)"));
		String saleString = salesElement.getText();
		if (saleString.contains(","))      saleString = saleString.replace(",", "");
		else if (saleString.contains("K")) saleString = saleString.replace("K", "");
		int sales = Integer.parseInt(saleString) ;
		System.out.println("Sales: " + sales);
		return sales ;
	}
	
	public static void main(String[] args) throws InterruptedException {
		BinanceCrawler aBinanceCrawler = new BinanceCrawler(new EdgeDriverContext());
       aBinanceCrawler.crawl();
		
	}
	
}
