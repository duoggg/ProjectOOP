package crawl;

import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.gson.Gson;

import application.model.AMarketModel;
import application.model.BinanceModel;
import application.model.OpenSeaModel;

public class OpenSea extends AMarketCrawl<AMarketModel> {
	
	private static final String     URL = "https://opensea.io/rankings/trending?sortBy=one_day_volume" ;
	private static final String     JSON_PATH = "collection.json" ;
	private ArrayList<OpenSeaModel> listCollection = new ArrayList<OpenSeaModel>();
	private WebDriverWait wait  ;

	public OpenSea(AMyDriverContext myDriver) {
		this.driver = myDriver.getDriver() ;
		driver.get(URL);
        driver.manage().window().maximize();
        driver.manage().deleteAllCookies();
        driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        driver.findElement(By.xpath("//button[contains(text(),'Accept')]")).click();
        try {
        	WebDriverWait wait = new WebDriverWait(driver, 50);
    		wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[data-id='Item']")));
    		Thread.sleep(3000);   
		 } catch (InterruptedException e) {
			e.printStackTrace();
		}     
	}
	
	@Override
	public void crawl() {
		
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,500)");
		
		while (listCollection.size() < 95) {
            wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a[data-id='Item']")));
            Thread.sleep(3000);
            List<WebElement> nftElements = driver.findElements(By.cssSelector("a[data-id='Item']"));
            for (WebElement n : nftElements) {
            	try {
            		NFTs item = new NFTs();
                	WebElement rankElement = n.findElement(By.cssSelector("div:nth-child(1) > div:nth-child(1)"));
                	int rank = Integer.parseInt(rankElement.getText());
                    item.setRank(rank);
                    System.out.println("Rank: " + item.getRank());
                    
                    // Get name collection
                    WebElement collectionElement = n.findElement(By.cssSelector("div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > span:nth-child(1)"));
                    item.setCollection(collectionElement.getText());
                    System.out.println("Collection: " + item.getCollection());
                    
                    // Get volume
                    WebElement volumeElement = n.findElement(By.cssSelector("div:nth-child(2) > div:nth-child(1) > span:nth-child(1) > div:nth-child(1)"));
                    item.setVolume(volumeElement.getText());
                    System.out.println("Volume: " + item.getVolume());
                    
                    // Get percentChange
                    WebElement percentElement = n.findElement(By.cssSelector("div:nth-child(3) > span:nth-child(1)"));
                    item.setPercentChange(percentElement.getText());
                    System.out.println("%Change: " + item.getPercentChange());
                    
                    // Get Floor Price
                    WebElement priceElement = n.findElement(By.cssSelector("div:nth-child(4) > div:nth-child(1) > span:nth-child(1)"));
                    item.setFloorPrice(priceElement.getText());
                    System.out.println("Floor Price: " + item.getFloorPrice());
                    
                    // Get Sales
                    WebElement salesElement = n.findElement(By.cssSelector("div:nth-child(5) > span:nth-child(1)"));
                    String saleString = salesElement.getText();
                    if (saleString.contains(",")) {
                    	saleString = saleString.replace(",", "");
                    	item.setSales(Integer.parseInt(saleString));
                    }
                    else if (saleString.contains("K")) {
                    	saleString = saleString.replace("K", "");
                    	item.setSales(Integer.parseInt(saleString) * 1000);
                    }
                    else item.setSales(Integer.parseInt(saleString));
                    System.out.println("Sales: " + item.getSales());
                    System.out.println("\n");
                    
                    // Set Date
                    item.setDate(DateTime);
                    listCollection.add(item);  
				} catch (NumberFormatException e) {
					System.out.println("Error!");
			 }
            	
           }      
                js.executeScript("window.scrollBy(0,2200)");
                Thread.sleep(3000);
		}
		
		List<NFTs> listWithoutDuplicates = listCollection.stream().distinct().collect(Collectors.toList());
		
	}

	public static void main(String[] args) throws InterruptedException {
		
		ArrayList<NFTs> listCollection = new ArrayList<NFTs>();
        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String DateTime = currentDateTime.format(formatter);	
		
		
	
		
		
		
		//Chuyển listCollection thành JSON text       
       

        System.out.println(listWithoutDuplicates.size());
        for (int i = 0; i < listCollection.size(); i++){
            System.out.println("#" + listCollection.get(i).getRank() + " " + listCollection.get(i).getCollection());
        }
		driver.quit();
	}

	

	@Override
	public void saveAsJsonFile() {
		 Gson gson = new Gson();
	     String jsonData = gson.toJson(listWithoutDuplicates);
	     try (FileWriter file = new FileWriter("collection.json")) {
	        file.write(jsonData);
	        file.flush();
	     } catch (IOException e) 
				e.printStackTrace();
		}
	

	@Override
	public AMarketModel getCollectionElement(int n) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getRankElement(int n) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public String getNameElelement(int n) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getVolumeElelement(int n) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getPercentChangeElelement(int n) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getFloorPriceElelement(int n) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getDateElelement(int n) {
		// TODO Auto-generated method stub
		return null;
	}
}
